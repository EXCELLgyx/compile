data segment
    str1 db 3,?,3 dup(?)
    str2 db 3,?,3 dup(?)
    inputData1 db 'inputData 1:$'
    inputData2 db 'inputData 2:$'
    allCommonDivisor db 'All commonDivisor : $'
    difference db 'Square Difference is : $'
    num1Percent db 'num1 percent: $'
    num2Percent db 'num2 percent: $'
    num1 db ?
    num2 db ?
    num1Square dw ?
    num2Square dw ?
    numDifference dw ?
    sum db ?
    temp db ?
    min dw ?
    percent1 db ?
    percent2 db ?
    modNum db ?
data ends
code segment
    assume cs:code,ds:data
    main proc far
start:
    mov ax,data
    mov ds,ax

    call readData 
    call commonDivisor
    call squareDifference
    call percent

    mov ax,4c00h
    int 21h
    main endp
    percent proc near
    mov dl,0ah ;print enter
    mov ah,02h
    int 21h

    lea dx,num1Percent ;print the marked words and enter
    mov ah,09h
    int 21h
    mov dl,0ah
    mov ah,02h
    int 21h

    mov ah,0  
    mov al,num1
    mov bx,10000 
    mul bx
    mov cl,sum
    mov ch,0
    div cx
    mov cl,100
    div cl
    
    mov bl,al
    mov bh,0
    mov modNum,ah
    call printData ;print the ten bits and individual
    mov dl,'.'
    mov ah,02h
    int 21h
 
    mov ah,modNum
    cmp ah,0 ;if modNum == 0 then print 0 twice
    jz L11
    mov bl,ah
    mov bh,0
    call printData ;modNum != 0 then call printData to print 
    jmp L12
    L11:
    mov dl,30h
    mov ah,02h
    int 21h
    mov ah,02h
    int 21h
    L12:
    mov dl,'%'
    mov ah,02h
    int 21h

    mov dl,0ah
    mov ah,02h
    int 21h
    lea dx,num2Percent
    mov ah,09h
    int 21h

    mov dl,0ah
    mov ah,02h
    int 21h
    mov ah,0
    mov al,num2
    mov bx,10000
    mul bx
    mov cl,sum
    mov ch,0
    div cx
    mov cl,100
    div cl

    mov bl,al
    mov bh,0
    mov modNum,ah
    call printData
    mov dl,'.'
    mov ah,02h
    int 21h

    mov ah,modNum
    cmp ah,0
    jz L13
    mov bl,ah
    mov bh,0
    call printData
    jmp L14
    L13:
    mov dl,30h
    mov ah,02h
    int 21h
    mov ah,02h
    int 21h
    L14:
    mov dl,'%'
    mov ah,02h
    int 21h
    ret
    percent endp
    squareDifference proc near

    lea dx,difference ;print the marked words and enter
    mov ah,09h
    int 21h
    mov dl,0ah
    mov ah,02h
    int 21h

    mov al,num1
    mov bl,num1
    mul bl
    mov num1Square,ax ;put the num1Square to num1Square

    mov al,num2
    mov bl,num2
    mul bl
    mov num2Square,ax ;put the num2Square to num2Square

    mov bx,num1Square 
    cmp bx,ax ;judge num1Square big or num2Square big
    ja L9
    sub ax,bx
    mov bx,ax
    or bh,10000000b ;set the bx to negative
    jmp L10
    L9:
    sub bx,ax ;num1Square smaller than num2Square
    L10:
    call printData
    ret
    squareDifference endp
    commonDivisor proc near
    mov dl,0ah  ;print two enter and marked words
    mov ah,02h
    int 21h
    lea dx,allCommonDivisor
    mov ah,09h
    int 21h
    mov dl,0ah
    mov ah,02h 
    int 21h
    
    mov ch,num1
    mov cl,num2
    cmp ch,cl  ;judge ch and cl who is big
    jae L6
    mov cl,ch ;ch is smaller than cl
    L6:
    mov ch,0 ;ch is bigger than cl
    mov min,cx

    mov bx,0
    L7:
    mov cx,min
    inc bx
    cmp bx,cx ;judeg the circle times <= cx
    ja L8
    mov ah,0
    mov al,num1
    div bl
    cmp ah,0 ;judge the num1 can be divisored
    jne L7
    mov ah,0
    mov al,num2
    div bl
    cmp ah,0 ;judge the num2 can be divisored
    jne L7
    mov temp,bl ;prevent the bx is changed  see 203
    call printData ;print the divsior
    mov bh,0
    mov bl,temp
    mov dl,32 ;print the space
    mov ah,02h
    int 21h
    jmp L7
    L8:
    mov dl,0ah 
    mov ah,02h 
    int 21h
    ret
    commonDivisor endp
    printData proc near 
    mov al,bh ;all data to print need to be put in bx
    rcl al,1
    jnc L3
    mov dl,'-'
    mov ah,02h
    int 21h
    and bh,01111111b
    L3:
    mov cx,0
    mov ax,bx
    L4:
    mov bx,10
    mov dx,0
    div bx
    push dx
    inc cx
    cmp ax,0 ;all data hava been put in stack
    jnz L4
    L5:
    pop dx
    add dx,30h
    mov ah,02h
    int 21h
    loop L5
    ret
    printData endp

    readData proc near 
    lea dx,inputData1 ;print the marked words and enter
    mov ah,09h
    int 21h
    mov dl,0ah 
    mov ah,02h 
    int 21h
 
    lea dx,str1 ;enter the first num1(str1)
    mov ah,0ah
    int 21h

    mov dl,0ah ;print the enter
    mov ah,02h 
    int 21h

    lea dx,inputData2;print the marked words and enter
    mov ah,09h
    int 21h
    mov dl,0ah 
    mov ah,02h 
    int 21h
 
    lea dx,str2 ;enter the second num2(str2)
    mov ah,0ah
    int 21h 

    mov dx,0   
    lea si,str1 ;get the address of num1(str1)
    mov si,2 ;!!!!!!!!!!!
    lodsb   ;read the first word
    mov dh,al
    lodsb  ;read the second word
    mov dl,al
    sub dh,30h ;the first world must be a num
    cmp dl,30h 
    jb L1
    cmp dl,39h
    ja L1   ;judge the second word
    mov al,dh
    mov bl,10
    mul bl
    mov dh,al
    sub dl,30h
    add dh,dl  ;get the latest num1
    L1:
    mov num1,dh
    mov bh,0
    mov bl,num1 ;put the num to variable num1
   
    mov dx,0 
    lea si,str2 ;get the str2 address
    mov si,7 ;!!!!!!!!
    lodsb 
    mov dh,al
    lodsb 
    mov dl,al
    sub dh,30h
    cmp dl,30h
    jb L2
    cmp dl,39h
    ja L2
    mov al,dh
    mov bl,10
    mul bl
    mov dh,al
    sub dl,30h
    add dh,dl
    L2:
    mov num2,dh
    mov bl,num1
    
    mov bl,num2
    mov bh,0

    mov al,num1
    add bl,al
    mov sum,bl
    ret                   
    readData endp
code ends
end start
